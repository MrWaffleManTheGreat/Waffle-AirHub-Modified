--[[

	Wall Hack Module [AirHub] by Exunys Â© CC0 1.0 Universal (2023)

	https://github.com/Exunys

]]

--// Cache

local select, next, tostring, pcall, getgenv, setmetatable, mathfloor, mathabs, mathcos, mathsin, mathrad, wait = select, next, tostring, pcall, getgenv, setmetatable, math.floor, math.abs, math.cos, math.sin, math.rad, task.wait
local WorldToViewportPoint, Vector2new, Vector3new, Vector3zero, CFramenew, Drawingnew, Color3fromRGB = nil, Vector2.new, Vector3.new, Vector3.zero, CFrame.new, Drawing.new, Color3.fromRGB

--// Launching checks

if not getgenv().AirHub or getgenv().AirHub.WallHack then return end

--// Services

local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

--// Variables

local ServiceConnections = {}

--// Environment

getgenv().AirHub.WallHack = {
	Settings = {
		Enabled = false,
		TeamCheck = false,
		AliveCheck = true
	},

	Visuals = {
		ChamsSettings = {
			Enabled = false,
			Color = Color3fromRGB(255, 255, 255),
			Transparency = 0.2,
			Thickness = 0,
			Filled = true,
			EntireBody = false -- For R15, keep false to prevent lag
		},

		ESPSettings = {
			Enabled = true,
			TextColor = Color3fromRGB(255, 255, 255),
			TextSize = 14,
			Outline = true,
			OutlineColor = Color3fromRGB(0, 0, 0),
			TextTransparency = 0.7,
			TextFont = Drawing.Fonts.UI, -- UI, System, Plex, Monospace
			Offset = 20,
			DisplayDistance = true,
			DisplayHealth = true,
			DisplayName = true
		},

		TracersSettings = {
			Enabled = true,
			Type = 1, -- 1 - Bottom; 2 - Center; 3 - Mouse
			Transparency = 0.7,
			Thickness = 1,
			Color = Color3fromRGB(255, 255, 255)
		},

		BoxSettings = {
			Enabled = true,
			Type = 1; -- 1 - 3D; 2 - 2D
			Color = Color3fromRGB(255, 255, 255),
			Transparency = 0.7,
			Thickness = 1,
			Filled = false, -- For 2D
			Increase = 1 -- For 3D
		},

		HeadDotSettings = {
			Enabled = true,
			Color = Color3fromRGB(255, 255, 255),
			Transparency = 0.5,
			Thickness = 1,
			Filled = false,
			Sides = 30
		},

		HealthBarSettings = {
			Enabled = false,
			Transparency = 0.8,
			Size = 2,
			Offset = 10,
			OutlineColor = Color3fromRGB(0, 0, 0),
			Blue = 50,
			Type = 3 -- 1 - Top; 2 - Bottom; 3 - Left; 4 - Right
		}
	},

	Crosshair = {
		Settings = {
			Enabled = false,
			Type = 1, -- 1 - Mouse; 2 - Center
			Size = 12,
			Thickness = 1,
			Color = Color3fromRGB(0, 255, 0),
			Transparency = 1,
			GapSize = 5,
			Rotation = 0,
			CenterDot = false,
			CenterDotColor = Color3fromRGB(0, 255, 0),
			CenterDotSize = 1,
			CenterDotTransparency = 1,
			CenterDotFilled = true,
			CenterDotThickness = 1
		},

		Parts = {
			LeftLine = Drawingnew("Line"),
			RightLine = Drawingnew("Line"),
			TopLine = Drawingnew("Line"),
			BottomLine = Drawingnew("Line"),
			CenterDot = Drawingnew("Circle")
		}
	},

	WrappedPlayers = {}
}

local Environment = getgenv().AirHub.WallHack

--// Core Functions

WorldToViewportPoint = function(...)
	return Camera.WorldToViewportPoint(Camera, ...)
end

local function GetPlayerTable(Player)
	for _, v in next, Environment.WrappedPlayers do
		if v.Name == Player.Name then
			return v
		end
	end
end

local function AssignRigType(Player)
	local PlayerTable = GetPlayerTable(Player)

	repeat wait(0) until Player:FindFirstChild("HumanoidRootPart")

	if Player:FindFirstChild("Torso") and not Player:FindFirstChild("LowerTorso") then
		PlayerTable.RigType = "R6"
	elseif Player:FindFirstChild("LowerTorso") and not Player:FindFirstChild("Torso") then
		PlayerTable.RigType = "R15"
	else
		repeat AssignRigType(Player) until PlayerTable.RigType
	end
end

local function InitChecks(Player)
	local PlayerTable = GetPlayerTable(Player)

	PlayerTable.Connections.UpdateChecks = RunService.RenderStepped:Connect(function()
		if Player:FindFirstChildOfClass("Humanoid") then
			if Environment.Settings.AliveCheck then
				PlayerTable.Checks.Alive = Player:FindFirstChildOfClass("Humanoid").Health > 0
			else
				PlayerTable.Checks.Alive = true
			end

			if Environment.Settings.TeamCheck then
				PlayerTable.Checks.Team = Player.TeamColor ~= LocalPlayer.TeamColor
			else
				PlayerTable.Checks.Team = true
			end
		else
			PlayerTable.Checks.Alive = false
			PlayerTable.Checks.Team = false
		end
	end)
end

local function UpdateCham(Part, Cham)
	local CorFrame, PartSize = Part.CFrame, Part.Size / 2

	if select(2, WorldToViewportPoint(CorFrame * CFramenew(PartSize.X / 2,  PartSize.Y / 2, PartSize.Z / 2).Position)) and Environment.Visuals.ChamsSettings.Enabled then

		--// Quad 1 - Front

		Cham.Quad1.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad1.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad1.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad1.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad1.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, PartSize.Z).Position)
		local PosTopRight = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, PartSize.Z).Position)
		local PosBottomLeft = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X, -PartSize.Y, PartSize.Z).Position)
		local PosBottomRight = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X, -PartSize.Y, PartSize.Z).Position)

		Cham.Quad1.PointA = Vector2new(PosTopLeft.X, PosTopLeft.Y)
		Cham.Quad1.PointB = Vector2new(PosBottomLeft.X, PosBottomLeft.Y)
		Cham.Quad1.PointC = Vector2new(PosBottomRight.X, PosBottomRight.Y)
		Cham.Quad1.PointD = Vector2new(PosTopRight.X, PosTopRight.Y)

		--// Quad 2 - Back

		Cham.Quad2.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad2.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad2.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad2.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad2.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft2 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosTopRight2 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosBottomLeft2 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X, -PartSize.Y, -PartSize.Z).Position)
		local PosBottomRight2 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X, -PartSize.Y, -PartSize.Z).Position)

		Cham.Quad2.PointA = Vector2new(PosTopLeft2.X, PosTopLeft2.Y)
		Cham.Quad2.PointB = Vector2new(PosBottomLeft2.X, PosBottomLeft2.Y)
		Cham.Quad2.PointC = Vector2new(PosBottomRight2.X, PosBottomRight2.Y)
		Cham.Quad2.PointD = Vector2new(PosTopRight2.X, PosTopRight2.Y)

		--// Quad 3 - Top

		Cham.Quad3.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad3.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad3.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad3.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad3.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft3 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosTopRight3 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosBottomLeft3 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, PartSize.Z).Position)
		local PosBottomRight3 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, PartSize.Z).Position)

		Cham.Quad3.PointA = Vector2new(PosTopLeft3.X, PosTopLeft3.Y)
		Cham.Quad3.PointB = Vector2new(PosBottomLeft3.X, PosBottomLeft3.Y)
		Cham.Quad3.PointC = Vector2new(PosBottomRight3.X, PosBottomRight3.Y)
		Cham.Quad3.PointD = Vector2new(PosTopRight3.X, PosTopRight3.Y)

		--// Quad 4 - Bottom

		Cham.Quad4.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad4.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad4.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad4.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad4.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft4 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  -PartSize.Y, -PartSize.Z).Position)
		local PosTopRight4 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  -PartSize.Y, -PartSize.Z).Position)
		local PosBottomLeft4 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  -PartSize.Y, PartSize.Z).Position)
		local PosBottomRight4 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  -PartSize.Y, PartSize.Z).Position)

		Cham.Quad4.PointA = Vector2new(PosTopLeft4.X, PosTopLeft4.Y)
		Cham.Quad4.PointB = Vector2new(PosBottomLeft4.X, PosBottomLeft4.Y)
		Cham.Quad4.PointC = Vector2new(PosBottomRight4.X, PosBottomRight4.Y)
		Cham.Quad4.PointD = Vector2new(PosTopRight4.X, PosTopRight4.Y)

		--// Quad 5 - Right

		Cham.Quad5.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad5.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad5.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad5.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad5.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft5 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosTopRight5 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X,  PartSize.Y, PartSize.Z).Position)
		local PosBottomLeft5 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X, -PartSize.Y, -PartSize.Z).Position)
		local PosBottomRight5 = WorldToViewportPoint(CorFrame * CFramenew(PartSize.X, -PartSize.Y, PartSize.Z).Position)

		Cham.Quad5.PointA = Vector2new(PosTopLeft5.X, PosTopLeft5.Y)
		Cham.Quad5.PointB = Vector2new(PosBottomLeft5.X, PosBottomLeft5.Y)
		Cham.Quad5.PointC = Vector2new(PosBottomRight5.X, PosBottomRight5.Y)
		Cham.Quad5.PointD = Vector2new(PosTopRight5.X, PosTopRight5.Y)

		--// Quad 6 - Left

		Cham.Quad6.Transparency = Environment.Visuals.ChamsSettings.Transparency
		Cham.Quad6.Color = Environment.Visuals.ChamsSettings.Color
		Cham.Quad6.Thickness = Environment.Visuals.ChamsSettings.Thickness
		Cham.Quad6.Filled = Environment.Visuals.ChamsSettings.Filled
		Cham.Quad6.Visible = Environment.Visuals.ChamsSettings.Enabled

		local PosTopLeft6 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, -PartSize.Z).Position)
		local PosTopRight6 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X,  PartSize.Y, PartSize.Z).Position)
		local PosBottomLeft6 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X, -PartSize.Y, -PartSize.Z).Position)
		local PosBottomRight6 = WorldToViewportPoint(CorFrame * CFramenew(-PartSize.X, -PartSize.Y, PartSize.Z).Position)

		Cham.Quad6.PointA = Vector2new(PosTopLeft6.X, PosTopLeft6.Y)
		Cham.Quad6.PointB = Vector2new(PosBottomLeft6.X, PosBottomLeft6.Y)
		Cham.Quad6.PointC = Vector2new(PosBottomRight6.X, PosBottomRight6.Y)
		Cham.Quad6.PointD = Vector2new(PosTopRight6.X, PosTopRight6.Y)
	else
		Cham.Quad1.Visible = false
		Cham.Quad2.Visible = false
		Cham.Quad3.Visible = false
		Cham.Quad4.Visible = false
		Cham.Quad5.Visible = false
		Cham.Quad6.Visible = false
	end
end

local function InitCham(Player)
	local PlayerTable = GetPlayerTable(Player)

	local Cham, Success = {
		Quad1 = Drawingnew("Quad"),
		Quad2 = Drawingnew("Quad"),
		Quad3 = Drawingnew("Quad"),
		Quad4 = Drawingnew("Quad"),
		Quad5 = Drawingnew("Quad"),
		Quad6 = Drawingnew("Quad")
	}, nil

	PlayerTable.Connections.UpdateChams = RunService.RenderStepped:Connect(function()
		if Environment.Visuals.ChamsSettings.Enabled then
			if Player:FindFirstChildOfClass("Humanoid") and Player:FindFirstChild("HumanoidRootPart") then
				if Environment.Visuals.ChamsSettings.EntireBody then
					for _, v in next, Player:GetChildren() do
						if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
							UpdateCham(v, Cham)
						end
					end
				else
					UpdateCham(Player.HumanoidRootPart, Cham)
				end
			else
				Cham.Quad1.Visible = false
				Cham.Quad2.Visible = false
				Cham.Quad3.Visible = false
				Cham.Quad4.Visible = false
				Cham.Quad5.Visible = false
				Cham.Quad6.Visible = false
			end
		else
			Cham.Quad1.Visible = false
			Cham.Quad2.Visible = false
			Cham.Quad3.Visible = false
			Cham.Quad4.Visible = false
			Cham.Quad5.Visible = false
			Cham.Quad6.Visible = false
		end
	end)

	PlayerTable.Chams = Cham
end

local function UpdateESP(Player, ESP)
	local Character, Distance, Name = Player, (LocalPlayer.Character.HumanoidRootPart.Position - Player.HumanoidRootPart.Position).Magnitude, Player.Name

	if Player ~= LocalPlayer then
		Name = Character.Name
	end

	local RootPart, Vector, onScreen = Character.HumanoidRootPart, nil, nil

	if Character:FindFirstChild("HumanoidRootPart") then
		Vector, onScreen = WorldToViewportPoint(Vector3new(Character.HumanoidRootPart.Position.X, Character.HumanoidRootPart.Position.Y, Character.HumanoidRootPart.Position.Z))
	else
		ESP.Text.Visible = false
		return
	end

	if Environment.Visuals.ESPSettings.Enabled and onScreen then
		ESP.Text.Transparency = Environment.Visuals.ESPSettings.TextTransparency
		ESP.Text.Color = Environment.Visuals.ESPSettings.TextColor
		ESP.Text.Size = Environment.Visuals.ESPSettings.TextSize
		ESP.Text.Center = true
		ESP.Text.Outline = Environment.Visuals.ESPSettings.Outline
		ESP.Text.OutlineColor = Environment.Visuals.ESPSettings.OutlineColor
		ESP.Text.Visible = true
		ESP.Text.Position = Vector2new(Vector.X, Vector.Y - Environment.Visuals.ESPSettings.Offset)

		local Text = ""

		if Environment.Visuals.ESPSettings.DisplayName then
			Text = Text .. Name .. "\n"
		end

		if Environment.Visuals.ESPSettings.DisplayHealth then
			Text = Text .. "HP: " .. tostring(mathfloor(Player.Humanoid.Health)) .. "\n"
		end

		if Environment.Visuals.ESPSettings.DisplayDistance then
			Text = Text .. "Distance: " .. tostring(mathfloor(Distance)) .. "\n"
		end

		ESP.Text.Text = Text
	else
		ESP.Text.Visible = false
	end
end

local function InitESP(Player)
	local PlayerTable = GetPlayerTable(Player)

	local ESP, Success = {
		Text = Drawingnew("Text")
	}, nil

	PlayerTable.Connections.UpdateESP = RunService.RenderStepped:Connect(function()
		if Player:FindFirstChildOfClass("Humanoid") and Player:FindFirstChild("HumanoidRootPart") then
			UpdateESP(Player, ESP)
		else
			ESP.Text.Visible = false
		end
	end)

	PlayerTable.ESP = ESP
end

local function UpdateTracer(Player, Tracer)
	local Character, RootPart = Player, Player.HumanoidRootPart

	if Character and Environment.Visuals.TracersSettings.Enabled then
		local Vector, onScreen = WorldToViewportPoint(Vector3new(RootPart.Position.X, RootPart.Position.Y, RootPart.Position.Z))

		if onScreen then
			Tracer.Line.Visible = true
			Tracer.Line.Transparency = Environment.Visuals.TracersSettings.Transparency
			Tracer.Line.Color = Environment.Visuals.TracersSettings.Color
			Tracer.Line.Thickness = Environment.Visuals.TracersSettings.Thickness

			if Environment.Visuals.TracersSettings.Type == 1 then
				Tracer.Line.From = Vector2new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
			elseif Environment.Visuals.TracersSettings.Type == 2 then
				Tracer.Line.From = Vector2new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
			elseif Environment.Visuals.TracersSettings.Type == 3 then
				Tracer.Line.From = UserInputService:GetMouseLocation()
			end

			Tracer.Line.To = Vector2new(Vector.X, Vector.Y)
		else
			Tracer.Line.Visible = false
		end
	else
		Tracer.Line.Visible = false
	end
end

local function InitTracer(Player)
	local PlayerTable = GetPlayerTable(Player)

	local Tracer, Success = {
		Line = Drawingnew("Line")
	}, nil

	PlayerTable.Connections.UpdateTracer = RunService.RenderStepped:Connect(function()
		if Player:FindFirstChildOfClass("Humanoid") and Player:FindFirstChild("HumanoidRootPart") then
			UpdateTracer(Player, Tracer)
		else
			Tracer.Line.Visible = false
		end
	end)

	PlayerTable.Tracer = Tracer
end

local function UpdateBox(Player, Box)
	local Character, RootPart = Player, Player.HumanoidRootPart

	if Character and Environment.Visuals.BoxSettings.Enabled then
		local Center, Size, _, onScreen = WorldToViewportPoint(Character:GetBoundingBox())

		if onScreen then
			if Environment.Visuals.BoxSettings.Type == 1 then
				Box.Quad.Visible = true
				Box.Quad.Transparency = Environment.Visuals.BoxSettings.Transparency
				Box.Quad.Color = Environment.Visuals.BoxSettings.Color
				Box.Quad.Thickness = Environment.Visuals.BoxSettings.Thickness
				Box.Quad.Filled = Environment.Visuals.BoxSettings.Filled

				Box.Quad.PointA = Vector2new(Center.X - Size.X / 2, Center.Y - Size.Y / 2)
				Box.Quad.PointB = Vector2new(Center.X + Size.X / 2, Center.Y - Size.Y / 2)
				Box.Quad.PointC = Vector2new(Center.X + Size.X / 2, Center.Y + Size.Y / 2)
				Box.Quad.PointD = Vector2new(Center.X - Size.X / 2, Center.Y + Size.Y / 2)
			elseif Environment.Visuals.BoxSettings.Type == 2 then
				Box.Line.Visible = true
				Box.Line.Transparency = Environment.Visuals.BoxSettings.Transparency
				Box.Line.Color = Environment.Visuals.BoxSettings.Color
				Box.Line.Thickness = Environment.Visuals.BoxSettings.Thickness

				Box.Line.PointA = Vector2new(Center.X - Size.X / 2, Center.Y - Size.Y / 2)
				Box.Line.PointB = Vector2new(Center.X + Size.X / 2, Center.Y - Size.Y / 2)
				Box.Line.PointC = Vector2new(Center.X + Size.X / 2, Center.Y + Size.Y / 2)
				Box.Line.PointD = Vector2new(Center.X - Size.X / 2, Center.Y + Size.Y / 2)
			end
		else
			Box.Quad.Visible = false
			Box.Line.Visible = false
		end
	else
		Box.Quad.Visible = false
		Box.Line.Visible = false
	end
end

local function InitBox(Player)
	local PlayerTable = GetPlayerTable(Player)

	local Box, Success = {
		Quad = Drawingnew("Quad"),
		Line = Drawingnew("Line")
	}, nil

	PlayerTable.Connections.UpdateBox = RunService.RenderStepped:Connect(function()
		if Player:FindFirstChildOfClass("Humanoid") and Player:FindFirstChild("HumanoidRootPart") then
			UpdateBox(Player, Box)
		else
			Box.Quad.Visible = false
			Box.Line.Visible = false
		end
	end)

	PlayerTable.Box = Box
end

local function UpdateHeadDot(Player, HeadDot)
	local Character, RootPart = Player, Player.HumanoidRootPart

	if Character and Environment.Visuals.HeadDotSettings.Enabled then
		local Head = Character:FindFirstChild("Head")

		if Head then
			local Vector, onScreen = WorldToViewportPoint(Vector3new(Head.Position.X, Head.Position.Y, Head.Position.Z))

			if onScreen then
				HeadDot.Circle.Visible = true
				HeadDot.Circle.Transparency = Environment.Visuals.HeadDotSettings.Transparency
				HeadDot.Circle.Color = Environment.Visuals.HeadDotSettings.Color
				HeadDot.Circle.Thickness = Environment.Visuals.HeadDotSettings.Thickness
				HeadDot.Circle.Filled = Environment.Visuals.HeadDotSettings.Filled
				HeadDot.Circle.NumSides = Environment.Visuals.HeadDotSettings.Sides
				HeadDot.Circle.Position = Vector2new(Vector.X, Vector.Y)
				HeadDot.Circle.Radius = Environment.Visuals.HeadDotSettings.Thickness
			else
				HeadDot.Circle.Visible = false
			end
		else
			HeadDot.Circle.Visible = false
		end
	else
		HeadDot.Circle.Visible = false
	end
end

local function InitHeadDot(Player)
	local PlayerTable = GetPlayerTable(Player)

	local HeadDot, Success = {
		Circle = Drawingnew("Circle")
	}, nil

	PlayerTable.Connections.UpdateHeadDot = RunService.RenderStepped:Connect(function()
		if Player:FindFirstChildOfClass("Humanoid") and Player:FindFirstChild("HumanoidRootPart") then
			UpdateHeadDot(Player, HeadDot)
		else
			HeadDot.Circle.Visible = false
		end
	end)

	PlayerTable.HeadDot = HeadDot
end

local function CreateESP(Player)
	local PlayerTable = {Name = Player.Name, Checks = {}, Connections = {}, ESP = {}, Chams = {}, Box = {}, Tracer = {}, HeadDot = {}}

	Environment.WrappedPlayers[#Environment.WrappedPlayers + 1] = PlayerTable

	AssignRigType(Player)
	InitESP(Player)
	InitCham(Player)
	InitBox(Player)
	InitTracer(Player)
	InitHeadDot(Player)
	InitChecks(Player)

	PlayerTable.Connections.Destroying = Player.Destroying:Connect(function()
		for _, Connection in next, PlayerTable.Connections do
			Connection:Disconnect()
		end

		for _, Drawing in next, PlayerTable do
			if typeof(Drawing) == "table" and Drawing.Visible ~= nil then
				Drawing.Visible = false
				Drawing:Remove()
			end
		end

		table.remove(Environment.WrappedPlayers, table.find(Environment.WrappedPlayers, PlayerTable))
	end)
end

local function UpdateESPForAllPlayers()
	for _, Player in next, Players:GetPlayers() do
		if not GetPlayerTable(Player) then
			CreateESP(Player)
		end
	end
end

--// Event Listeners

ServiceConnections.PlayerAdded = Players.PlayerAdded:Connect(function(Player)
	if not GetPlayerTable(Player) then
		CreateESP(Player)
	end
end)

ServiceConnections.PlayerRemoving = Players.PlayerRemoving:Connect(function(Player)
	local PlayerTable = GetPlayerTable(Player)

	if PlayerTable then
		for _, Connection in next, PlayerTable.Connections do
			Connection:Disconnect()
		end

		for _, Drawing in next, PlayerTable do
			if typeof(Drawing) == "table" and Drawing.Visible ~= nil then
				Drawing.Visible = false
				Drawing:Remove()
			end
		end

		table.remove(Environment.WrappedPlayers, table.find(Environment.WrappedPlayers, PlayerTable))
	end
end)

ServiceConnections.RenderStepped = RunService.RenderStepped:Connect(UpdateESPForAllPlayers)
